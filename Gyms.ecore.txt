import ecore : 'http://www.eclipse.org/emf/2002/Ecore';

package gyms : gym = 'http://www.example.org/gym'
{
	class Gym
	{
		attribute city : String[1];
		attribute capacity : Integer[1];
		
		property machines#gym : Machine[*] { composes };
		property plans#gym : Plan[*] { composes };
		property people#gym : Person[*] { composes };
		
		invariant uniqueCity: Gym.allInstances()->isUnique(g | g.city);
		invariant positiveCapacity: capacity > 0;
	}

	class Machine
	{
		attribute model : String[1];
		attribute name : String[1];
		attribute brand : String[1];
		
		property gym#machines : Gym[?];
		
		invariant uniqueModel: Machine.allInstances()->isUnique(m | m.model);
	}

	abstract class Person
	{
		attribute name : String[1];
		attribute dateOfBirth : ecore::EDate[1];
		attribute email : String[1];
		attribute phoneNumber : String[1];
		
		property gym#people : Gym[?];
		
		invariant uniqueEmail: Person.allInstances()->isUnique(p | p.email);
		invariant uniquePhoneNumber: Person.allInstances()->isUnique(p | p.phoneNumber);
	}

	class Staff extends Person
	{
		attribute role : StaffType[1];
	}

	class Client extends Person
	{
		property plan#clients : Plan[1];
	}

	class Plan
	{
		attribute tier : String[1];
		attribute price : Integer[1];
		attribute daysPerWeek : Integer[1];
		
		property gym#plans : Gym[1];
		property clients#plan : Client[*];
		
		invariant positivePrice: price > 0;
		invariant validDaysPerWeek: daysPerWeek >= 2 and daysPerWeek <= 7;
	}

	enum StaffType { serializable }
	{
		Trainer;
		Receptionist = 1;
	}
}
