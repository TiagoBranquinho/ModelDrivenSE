module ER2Mongo;

-- @path ER=/TACS_2/ER.ecore
-- @path MongoDB=/TACS_2/MongoDB.ecore

create OUT: MongoDB from IN: ER;

rule DiagramToMongoDB {
    from
        d : ER!Diagram
    to
        m : MongoDB!MongoDB (
            name <- d.name,
            collections <- d.entities
        )
}

rule EntityToMongoCollection {
    from
        e : ER!Entity
    to
        mc : MongoDB!MongoCollection (
            name <- e.name,
            schema <- thisModule.EntityToMongoSchema(e)
        )
}

rule EntityToMongoSchema {
    from
        e : ER!Entity
    to
        schema : MongoDB!MongoSchema (
            name <- e.name,
            fields <- e.attributes->collect(a | thisModule.AttributeToMongoField(a, e.primaryKey))
        )
}

rule AttributeToMongoField {
    from
        a : ER!Attribute,
        pk : ER!Attribute
    to
        f : MongoDB!MongoField (
            name <- a.name,
            type <- thisModule.mapAttributeTypeToFieldType(a.type),
            isRequired <- true,
            isIndexed <- if a = pk then true else false endif
        )
}

helper def : mapAttributeTypeToFieldType(type : ER!AttributeType) : MongoDB!MongoFieldType =
    if type = #string then #string
    else if type = #boolean then #boolean
    else if type = #float then #float
    else if type = #integer then #integer
    else if type = #date then #date
    else #object endif
